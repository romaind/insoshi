<?xml version="1.0" encoding="iso-8859-1" ?>
<!DOCTYPE rss PUBLIC "-//Netscape Communications//DTD RSS 0.91//EN"
                     "http://my.netscape.com/publish/formats/rss-0.91.dtd"> 
<rss version="0.91">
<channel>
  <title>PragDave</title>
  <link>http://pragprog.com/pragdave</link>
  <description>Dave's Weblog: Pragmatic Programming.</description>
  <language>en-us</language>
  <item>
    <title>Reasons to Like Scripting Languages, #134</title>
    <link>http://pragprog.com/pragdave/Tech/Ruby/ShowUsage.rdoc</link>
    <description>Well-behaved command line programs (remember the command line?) display a
nice usage message when given invalid arguments. The message describes what
they do and how they should be invoked. Well-documented command line
programs also start with some kind of comment block. The comment describes
what they do and how they should be invoked.

&lt;p&gt;
Hmmm, seems like a violation of the DRY principle, having all that
information duplicated&amp;#8230;
&lt;/p&gt;
&lt;p&gt;
In Ruby (and most scripting languages, I suspect) it needn&amp;#8217;t be.
Let&amp;#8217;s assume that the top-level source file in your application
starts with a comment describing how it is used. We can then use the
built-in &lt;tt&gt;caller&lt;/tt&gt; method, which returns call stack. The last element
in this array is the top level program. The entry is in the form
&lt;em&gt;filename:linenumber&lt;/em&gt;, so we can use a simple regexp to extract just
the file name portion. We then open that source file and read in the
comment block, writing it out as a help message after stripping the leading
comment characters.
&lt;/p&gt;
&lt;p&gt;
The &lt;tt&gt;show_usage&lt;/tt&gt; method is pretty simple:
&lt;/p&gt;
&lt;pre&gt;
   def show_usage(msg=nil)
     name = caller[-1].sub(/:\d+$/, '')
     $stderr.puts &amp;quot;\nError: #{msg}&amp;quot; if msg
     $stderr.puts
     File.open(name) do |f|
       while line = f.readline and line.sub!(/^# ?/, '')
         $stderr.puts line
       end
     end
     exit 1
   end
&lt;/pre&gt;
&lt;p&gt;
An example of this method in use is the start of a simple utility I wrote
to record ad-hoc royalty payments to authors.
&lt;/p&gt;
&lt;pre&gt;
   # Pay an author a sum of money. We simply record the payment
   # in the author_royalty_payment table: the statement code
   # sorts it all out
   #
   # usage:
   #    ruby pay.rb   &amp;quot;Author Name&amp;quot;   1234.56   &amp;lt;checkno&amp;gt;
   #

   require &amp;quot;common&amp;quot;

   author = ARGV.shift    ||     show_usage(&amp;quot;Missing author name&amp;quot;)
   amount = ARGV.shift    ||     show_usage(&amp;quot;Missing amount&amp;quot;)
   amount = Money(amount) rescue show_usage(&amp;quot;Invalid amount&amp;quot;)
   check  = ARGV.shift    ||     show_usage(&amp;quot;Missing check&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;
Trivial, I know, but I like the simplicity.
&lt;/p&gt;
</description>
  </item>

  <item>
    <title>Mike's Closing Comments</title>
    <link>http://pragprog.com/pragdave/Random/MikeExperience.rdoc</link>
    <description>Our first external author, Mike Clark, just &lt;a
href=&quot;http://www.clarkware.com/cgi/blosxom/2004/06/25#WYSIWYG&quot;&gt;blogged&lt;/a&gt;
on the experience of writing for us. He makes some really good points about
the efficiency of a process where everyone is working on the same source
for a book, using decent collaboration tools.

&lt;p&gt;
Given that it&amp;#8217;s the first time that this particular tool chain has
been used to create a book, I&amp;#8217;m really pleased with the result. I was
initially concerned that using purely logical markup would make it harder
to do the final typesetting-like things: page balancing, widow/orphan
control, and so on. In the end, this turned out not to be an issue:
there&amp;#8217;s only one physical markup override in the whole book.
&lt;/p&gt;
&lt;p&gt;
One of the unexpected productivity boosts was the way CVS and IM can work
together. With Mike in Colorado and me in Texas, I was worried about
communicating back and forth changes. But we kept a pretty constant IM
session going (it helps that Mike seems to work even longer hours than I
do). If I made a change, I could format up the chapter and drop the
affected page into iChat for Mike to inspect. He he agreed, a quick CVS
commit gave it to him. He did the same back to me.
&lt;/p&gt;
&lt;p&gt;
All in all, a very rewarding experience. The only issue still be addressed
is to find a decent editor for our other authors to use. Mike and I love
using emacs to edit XML (it really does make it painless), but the learning
curve is steep, and I don&amp;#8217;t want to impose emacs on everyone. So, can
anyone recommend a decent editor that supports XML (ideally DTD based, how
retro), and supports it unobtrusively. The key thing to remember is that
we&amp;#8217;re entering lots of text, and not structured data. Thanks&amp;#8230;
&lt;/p&gt;
</description>
  </item>

  <item>
    <title>We're in Borders</title>
    <link>http://pragprog.com/pragdave/Random/Borders.rdoc</link>
    <description>I just checked some local bookstores&amp;#8212;the Pragmatic Starter kit books
are now available in some Borders! That&amp;#8217;s pretty neat: in a way the
loop is now closed. If you&amp;#8217;ve been waiting to thumb through a book
before buying, now&amp;#8217;s your chance.

&lt;p&gt;
So, next time you&amp;#8217;re in a Borders, check to see if we&amp;#8217;re there.
(And next time you&amp;#8217;re in Barnes and Noble, ask &amp;#8216;em why they
take so long to place orders :)
&lt;/p&gt;
</description>
  </item>

  <item>
    <title>A Milestone Reached</title>
    <link>http://pragprog.com/pragdave/Random/AutomationReview.rdoc</link>
    <description>Mike Clark&amp;#8217;s been hunkered down for a number of months now writing
the third volume of the Starter Kit, &lt;a
href=&quot;http://www.pragmaticprogrammer.com/sk/auto&quot;&gt;Pragmatic Project
Automation&lt;/a&gt;. On Monday this week he finished the draft, and it went out
to 20 or so lucky folks for a first review. The feedback so far has been
marvelous: people really like both the content &lt;em&gt;and&lt;/em&gt; the style
(after all, lava lamps are this year&amp;#8217;s essential project accessory).

&lt;p&gt;
I&amp;#8217;m really pleased about all this for a number of reasons. First,
I&amp;#8217;m pleased for us. This really is a great book&amp;#8212;practical,
timely, and fun to read. We couldn&amp;#8217;t have asked for a better way to
round out the starter kit. I&amp;#8217;m also pleased because automation is
near and dear to my heart, and with Mike&amp;#8217;s book we finally have
something to show people to say &amp;quot;this is what we mean.&amp;quot; And, of
course, I&amp;#8217;m please for Mike. Writing a book is a lot of work, and it
requires a bunch of dedication. In Mike&amp;#8217;s case, that was tested even
more, as he was the first person to use our new typesetting toolchain.
&lt;/p&gt;
&lt;p&gt;
It&amp;#8217;s looking like the book will be available sometime in July, and I
for one can&amp;#8217;t wait.
&lt;/p&gt;
</description>
  </item>

  <item>
    <title>Test Driven or Test First?</title>
    <link>http://pragprog.com/pragdave/Practices/TestDrivenOrTestFirst.rdoc</link>
    <description>I recently got into a discussion with Cobbie Behrend, following on from
some comments I&amp;#8217;d made about test-driven development. I&amp;#8217;d said
that I rarely do &lt;em&gt;test-first&lt;/em&gt;, but I often do &lt;em&gt;test-driven&lt;/em&gt;
coding.

&lt;p&gt;
Cobbie pushed me to distinguish between them, particularly in light of
references on the &lt;a
href=&quot;http://www.objectmentor.com/writeUps/TestDrivenDevelopment&quot;&gt;Object
Mentor site&lt;/a&gt;, the C2 &lt;a
href=&quot;http://c2.com/cgi/wiki?TestDrivenDevelopment&quot;&gt;wiki&lt;/a&gt;, and other
sites, which seem to equate the two.
&lt;/p&gt;
&lt;p&gt;
I disagree&amp;#8212;test-first is different than test-driven development.
&lt;/p&gt;
&lt;p&gt;
For me, &lt;b&gt;test-driven&lt;/b&gt; development is an important way of thinking
about coding. It&amp;#8217;s about using tests to gain perspective on your
design and implementation. You listen to what the tests are telling you,
and alter to code accordingly. Finding it hard to test something in
isolation? Refactor your code to reduce coupling. Is it impossible to mock
out a particular subsystem? Look at adding facades or interfaces to make
the separation cleaner. Tests drive the design, and tests verify the
implementation.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Test-first&lt;/b&gt; development takes this a step further. In test-first, you
never write a line of production code until you first have a failing test
that will be &amp;quot;fixed&amp;quot; by the code you write. Want to write a new
class? First write a test that instantiates it, watch the test fail, and
then implement the class body to fix the broken test.
&lt;/p&gt;
&lt;p&gt;
Test-first development is a subclass of test-driven development. It has
every benefit of test-driven development, and then adds a ritual component
of testing and coding in a certain order. The intent of the ritual is to
ensure that tests are always produced.
&lt;/p&gt;
&lt;p&gt;
For me, test-driven development is an essential part of coding. Test-first
coding, however, often strikes me as unnecessarily high-church. So I
distinguish the two, in the same way that I distinguish agile methods from
eXtreme Programming. Test-driven is an important, almost universal
practice. Test-first is a particular implementation, and it isn&amp;#8217;t
always applicable.
&lt;/p&gt;
&lt;p&gt;
I don&amp;#8217;t know if this helps Cobbie in his search for meaning,
though&amp;#8230;
&lt;/p&gt;
</description>
  </item>

  <item>
    <title>Outsourcing Article</title>
    <link>http://pragprog.com/pragdave/Practices/OutsourceArticle.rdoc</link>
    <description>A while back I was interviewed about outsourcing. The article appeared over
the weekend in &lt;a
href=&quot;http://bostonworks.boston.com/globe/articles/051604_outsource.html&quot;&gt;The
Boston Globe&lt;/a&gt;. Nothing too revolutionary, but still some good solid
advice from a number of contributors.

</description>
  </item>

  <item>
    <title>End of the Knowledge Worker?</title>
    <link>http://pragprog.com/pragdave/Practices/ValueWorker.rdoc</link>
    <description>Andy and I give a talk called &amp;quot;Herding Racehorses, Racing Sheep.&amp;quot;
It&amp;#8217;s about a theory called the &lt;em&gt;Dreyfus Model of Skill
Acquisition&lt;/em&gt;, and about the impact of that theory on how we as an
industry work.

&lt;p&gt;
Originally picked up by the nursing profession (and particularly in a book
by Benner&amp;#8212;&lt;a
href=&quot;http://www.amazon.com/exec/obidos/ASIN/0130325228/thepragmaticprog&quot;&gt;From
Novice to Expert: Excellence and Power in Clinical Nursing Practice&lt;/a&gt;),
the Dreyfus model is a fascinating explanation of how we progress through
levels of expertise in a particular area. We start as novices, and as
novices we need rules, guidance, rapid feedback, and safe environments. As
we serve our time as a novice we&amp;#8217;re gaining experience. Because of
this, a subtle thing happens. Our brains internalize the experiences and
start building conceptual frameworks. In turn, these frameworks start
guiding how we do the job. This in turn flavors the experience we get, and
so a cycle develops.
&lt;/p&gt;
&lt;p&gt;
The net effect is that we start developing &lt;em&gt;intuition&lt;/em&gt; about what
we&amp;#8217;re doing. This isn&amp;#8217;t anything magical or innate. It&amp;#8217;s
simply a manifestation of the existence of a fairly complex knowledge
framework in our heads&amp;#8212;we &lt;em&gt;know&lt;/em&gt; what will happen when we do X
because we have all the information stored somewhere in our heads, and our
neurons are particularly good at parallel, associative lookup. The
interesting thing is that because the response is fashioned in our brains
from many sources by associative lookup, we can&amp;#8217;t always say
&lt;em&gt;why&lt;/em&gt; we know what will happen. We just do, just as we know that an
apple will fall if we release it from our hand.
&lt;/p&gt;
&lt;p&gt;
So, high-quality experience turns us from a novice to something approaching
an expert. We process information in a qualitatively different way in the
two states: novices need rules, experts need concepts and contexts. Novices
need external feedback, experts generate their own. Stuff that works when
teaching a novice drives an expert up the wall, and vice-versa. Experts are
often the worst teachers of novices.
&lt;/p&gt;
&lt;p&gt;
So why is something from nursing the subject of a talk to programmers? Two
reasons.
&lt;/p&gt;
&lt;p&gt;
First, the nursing profession had a lot of problems in the 70&amp;#8217;s. The
Benner book, and the Dreyfus model, is often quoted as being instrumental
in helping turn it around. And if you read the book, you&amp;#8217;ll see that
the problems faced by nursing back then have strong parallels to those
faced by the software industry today.
&lt;/p&gt;
&lt;p&gt;
But there&amp;#8217;s a second reason it&amp;#8217;s appropriate.
&lt;/p&gt;
&lt;p&gt;
Novices need rules, but by the time you&amp;#8217;re stepped a couple of rungs
up the Dreyfus ladder you&amp;#8217;re relying less on rules and more on
interactions and contexts.
&lt;/p&gt;
&lt;p&gt;
Now think about the current industry bogeyman: outsourcing. What can
companies effectively outsource? Stuff that can be specified precisely.
Stuff that has rules. This means that (in general) the jobs of novices will
be more at risk from outsourcing that those of experts. Now, this is my no
means a perfect model: companies outsource projects that shouldn&amp;#8217;t be
outsourced, and companies have a strange habit of firing their experienced
people in bad times because their salaries are 50% higher than the novices
(why does no one ever account for the cost of all that experience walking
out the door?). But, ignoring all the exceptions, in general we need to
move away from the low Dreyfus levels and start occupying the higher
Dreyfus levels if we are to to make ourselves less vulnerable to job
evaporation. And Dreyfus is all about the acquisition of skills through
experience. The second part of the talk is all about strategies for gaining
that experience.
&lt;/p&gt;
&lt;p&gt;
We&amp;#8217;re repeatedly told that in this brave new economy, we&amp;#8217;ve all
become knowledge workers. That&amp;#8217;s not good enough. Knowledge on its
own is just another commodity, and commodities tend to settle in places
with low costs of production. If we want to save our jobs, if we want to be
paid more for what we do, we have to be more than knowledge workers. We
have to parlay that knowledge into meaningful experience. We have to be
value workers.
&lt;/p&gt;
&lt;p&gt;
To borrow a line from Jimi Hendrix, are you experienced?
&lt;/p&gt;
</description>
  </item>

  <item>
    <title>Broken Raspberries</title>
    <link>http://pragprog.com/pragdave/Practices/BrokenRaspberries.rdoc</link>
    <description>I came across (yet another) example of real-life &lt;a
href=&quot;http://www.pragmaticprogrammer.com/ppbook/extracts/no_broken_windows.html&quot;&gt;broken
windows&lt;/a&gt; last night.

&lt;p&gt;
I went to the supermarket about 6:30pm to buy some lettuce. Big mistake. At
that time of night it&amp;#8217;s crowded, full of folks on their way home. All
the checkout lanes were four people deep, and every employee was working a
register. It was chaotic, and a high pressure environment for those who
worked there. Customers picked up on the tension: everyone was a little on
edge.
&lt;/p&gt;
&lt;p&gt;
Then, three people ahead of me in line, a women dropped a box of
raspberries out of her cart. They spread out in a patch maybe 18&amp;quot;
across. The woman was embarrassed, and pointed out the spill to the guy
running the checkout. He craned his head to look, then looked at the length
of the line and the expression on the face of the person he was serving.
&amp;quot;I&amp;#8217;m too busy to deal with that now,&amp;quot; he said. But he did
call out to the floor manager. She was on her way to start up a new
checkout, clearly harried. &amp;quot;No time&amp;quot; she called. So the
raspberries lay there. As the line moved forward, the woman tried to move
the raspberries out of the way, but she wasn&amp;#8217;t too successful. In
fact she managed to squash a few of them. The next person in line also
tried to be careful, but his trolley ran over some, and got raspberry juice
on the wheels. And so it went. By the time I checked out, the raspberries
were a purple-red mess on the floor. The mess had spread from a small,
contained spot to a large stain, and there were red tracks leading from the
checkout to the two doors. The stains were already drying. It was going to
take someone a while to clean it all up.
&lt;/p&gt;
&lt;p&gt;
On the way home, I thought &amp;quot;that&amp;#8217;s another great &amp;#8216;broken
windows&amp;#8217; story.&amp;quot; Fail to fix something early, and reap a whole
lot of extra work later. Had the assistant said to the line: &amp;quot;Let me
clean these up before they get all over your shoes&amp;quot; and spent 30
seconds with a broom, the problem would have gone away, and no one would
have complained. In fact, the customers would have left the store glad that
someone actually cleaned things up. Instead, we walked away with a bad
impression and red-stained shoes.
&lt;/p&gt;
&lt;p&gt;
It&amp;#8217;s the same on software projects. Even when (especially when)
things are chaotic and pressured, make the time to fix the small stuff.
Otherwise it&amp;#8217;ll just become big stuff, and your customers will end up
seeing red.
&lt;/p&gt;
</description>
  </item>

  <item>
    <title>Movable Style</title>
    <link>http://pragprog.com/pragdave/Tech/Blog/MovableStyle.rdoc</link>
    <description>&lt;a href=&quot;http://www.chadfowler.com/&quot;&gt;Chad&lt;/a&gt; has written a new RubLog
template that is compatible with &lt;a
href=&quot;http://www.movablestyle.com&quot;&gt;MovableStyle&lt;/a&gt; stylesheets. All you
have to do to include a style in your blog is.

&lt;ol&gt;
&lt;li&gt;Get the latest &lt;a href=&quot;http://sourceforge.net/cvs/?group_id=73452&quot;&gt;CVS of
RubLog&lt;/a&gt;

&lt;/li&gt;
&lt;li&gt;Choose a style from &lt;a href=&quot;http://www.movablestyle.com&quot;&gt;MovableStyle&lt;/a&gt;
and download the corresponding stylesheet (and any other required images).

&lt;/li&gt;
&lt;li&gt;Alter your &lt;tt&gt;rublog,cgi&lt;/tt&gt; to use Chad&amp;#8217;s template with the new
stylesheet. This requires two changes.

&lt;ol&gt;
&lt;li&gt;In the line where you create the blog, use &lt;tt&gt;&amp;quot;movable&amp;quot;&lt;/tt&gt; as
a parameter to CGIRequest.new.

&lt;/li&gt;
&lt;li&gt;In the parameter settings, set the name of the external stylesheet to use.

&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
A typical configuration might look like the following:
&lt;/p&gt;
&lt;pre&gt;
    blog = RubLog.new(&amp;quot;/Users/cvs/blog&amp;quot;, CGIRequest.new(&amp;quot;movable&amp;quot;)) do
      set_top_title                 &amp;quot;My Blog&amp;quot;
      set_max_entries_per_page      5
      set_rss_description           &amp;quot;Dave's Weblog&amp;quot;
      set_rss_image_title           'PragDave'
      set_rss_image_link            'http://pragprog.com/pragdave'
      set_rss_image_url             'http://pragprog.com/scary.png'
      set_rss_encoding              'iso-8859-1'
      set_copyright                 &amp;quot;#{Time.now.year} Dave Thomas&amp;quot;
      set_external_stylesheet        &amp;quot;http://pragprog.com/styles/Mac_Stripe/styles-site.css&amp;quot;
      set_ignore_directory_pattern   /Secret/
      set_ignore_filename_pattern    /Comp|Unreleased/
    end
&lt;/pre&gt;
&lt;p&gt;
Remember to read the MovableStyles &lt;a
href=&quot;http://www.movablestyle.com/archives/000016.php#more&quot;&gt;FAQ&lt;/a&gt; for
details on attributing any style you use.
&lt;/p&gt;
</description>
  </item>

  <item>
    <title>Drop Target for my Brain</title>
    <link>http://pragprog.com/pragdave/Random/NearTimeFlow.rdoc</link>
    <description>At the recent No Fluff symposium in St Louis, I was privileged to see a
pre-release demo of &lt;a href=&quot;http://www.near-time.com/&quot;&gt;Near-Time's
Flow&lt;/a&gt; application. Stu Halloway&amp;#8217;s been talking about his latest
venture for a while now, but to be honest it always sounded too good to be
true. Now that I&amp;#8217;ve seen it in the flesh, I realize that he
wasn&amp;#8217;t just being the proud parent&amp;#8212;Flow really is something
special.

&lt;p&gt;
Imagine something like a wiki: an information system that simply accepts
text and stores it away in a simple hierarchy. Now imagine it accepting
that text from just about any source and (here&amp;#8217;s where it gets fun)
imagine it remembering that source. Say you&amp;#8217;re doing web research on
&amp;quot;rubber ducks.&amp;quot; As you browse the web, you highlight paragraphs
from interesting pages and drop them into Flow. Gradually you build your
research into a local Flow document. You can annotate that document, adding
your own notes. And, if you need more details, you can click on any of the
original text and Flow will pop you over to the original web page. The
linking works with files, images, whatever (we worked hard on Stu to get
him to support e-mail too, but there are some issues with Mail.app to
contend with).
&lt;/p&gt;
&lt;p&gt;
Flow also contains smart pages: pages whose content is generated
dynamically from other pages. Think of it as being something like an RSS
aggregator for all the work you do. And if the aggregation doesn&amp;#8217;t
help, Flow has a speedy built-in full-text search engine.
&lt;/p&gt;
&lt;p&gt;
Then (it keeps getting better), Flow maintains the full history of each
page. Down the bottom, there&amp;#8217;s a slider. Move it across, and Flow
rolls back time, showing you the page as it appeared in the past. Slide the
other way, and you move back to the present.
&lt;/p&gt;
&lt;p&gt;
And then (better, again), Flow supports collaboration. But this isn&amp;#8217;t
your your father&amp;#8217;s standard centralized-database-style collaboration.
Instead, Flow is like a push-version of P2P: you tell it to share subtrees
of your information with other Flow users, and it works out how to get it
done. Say I was sitting in the airport using a wireless network and I tell
Flow to share a 10Mb folder with Andy. Half way through, the flight is
called and I close down my laptop, with only 8Mb transferred. When I get to
my clients, it turns out that their firewall blocks Flow, but allows
e-mail. No problem. Flow works it out and sends the remaining data in a
bunch of separate e-mails. At the other end all this data gets reassembled
into my original folder.
&lt;/p&gt;
&lt;p&gt;
From an individual perspective, Flow looks like it could be a life saver:
I&amp;#8217;m constantly dropping bookmarks into folders, and then forgetting
them. I&amp;#8217;m constantly struggling to maintain to-do lists from a
variety of sources. And I&amp;#8217;m always trying to keep track of ideas for
talks. Flow seems ideal for all these things: it becomes the drop target
proxy for my atrocious memory.
&lt;/p&gt;
&lt;p&gt;
Then, if I could convince Andy to switch to a Mac, I can see the
collaboration stuff really suiting the loose way we work.
&lt;/p&gt;
&lt;p&gt;
Flow is a great example of taking a couple of metaphors, then writing a
whole bunch of intelligent code to make them look simple and intuitive.
That&amp;#8217;s not easy: my hat&amp;#8217;s off to the Near-Time folk.
&lt;/p&gt;
</description>
  </item>

  <item>
    <title>We Got a Jolt Award!</title>
    <link>http://pragprog.com/pragdave/Random/JoltAward.rdoc</link>
    <description>Sue Spielman just called. Apparently the &lt;a
href=&quot;http://www.pragmaticprogrammer.com/starter_kit/&quot;&gt;Pragmatic Starter
Kit&lt;/a&gt; just won a Jolt Productivity Award. I&amp;#8217;m blown away: we had
some stiff competition, and the books haven&amp;#8217;t been out that long.
I&amp;#8217;m thinking that the judges were probably thinking what we&amp;#8217;re
thinking: these kinds of basic skills are becoming crucially important if
we&amp;#8217;re to keep software development competitive in this country.

&lt;p&gt;
Anyway, a big &amp;quot;thank you!&amp;quot; to everyone involved, and
congratulations to the winners.
&lt;/p&gt;
</description>
  </item>

  <item>
    <title>Tim Bray on Dynamic Languages</title>
    <link>http://pragprog.com/pragdave/Random/TimBrayAtSun.rdoc</link>
    <description>Tim Bray has just &lt;a
href=&quot;http://www.tbray.org/ongoing/When/200x/2004/03/15/SunnyBoy&quot;&gt;joined
Sun&lt;/a&gt; (congratulations, Sun). One of the interesting snippets in the
middle of the article was:

&lt;dl&gt;
&lt;dt&gt;&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;In fact I personally believe that Java&amp;#8217;s share of enterprise
software will decline, but not in favor of anything from Redmond. I think
that dynamic languages (Python and friends), particularly in conjunction
with Test-Driven Development, are looking more like winners all the time.
They generally are cheaper to program in, run just as fast, and have fewer
bugs; what&amp;#8217;s not to like?&lt;/em&gt;

&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;
I wonder if Tim&amp;#8217;s in a position to help Sun see that the drive to
make J2EE heavier and heavier will ultimately hurt them? There&amp;#8217;s a
definite groundswell out there of folks pushing back against the monster
that is modern enterprise development (just look at the spread of the
Groovy meme, and things like Spring). Will companies like Sun and BEA
listen, or will they simply become less relevant? I&amp;#8217;m hoping that Sun
at least listens, but I&amp;#8217;m not holding my breath: they&amp;#8217;ve got an
awful lot invested in the J2EE, and seem to think that the only way to move
into the future is to add even more features.
&lt;/p&gt;
&lt;p&gt;
The best thing that they could do for themselves and for the development
community would be to scrap at least half of J2EE, and move back to a more
lightweight, declarative style of applications development. Perhaps the 1.5
metadata stuff is a Trojan horse to let them do that, but I suspect not.
&lt;/p&gt;
</description>
  </item>

  <item>
    <title>Nice Interface in a Storm</title>
    <link>http://pragprog.com/pragdave/Tech/Apple/Recovery.rdoc</link>
    <description>My Powerbook&amp;#8217;s hard drive came to a sticky end yesterday. Almost
literally. Starting in the morning, it seemed to &amp;quot;stick&amp;quot; every
now and then, and applications would hang until it came back. The sticking
got worse and worse until eventually everything just died.

&lt;p&gt;
Down to the Apple store, and Tony in the Genius Bar said &amp;quot;before we
wipe it, why not take an full disk copy to be on the safe side. It&amp;#8217;ll
probably cool down enough overnight that you&amp;#8217;ll be able to get to the
disk.&amp;quot; And he recommended &lt;a
href=&quot;http://www.bombich.com/software/ccc.html&quot;&gt;Carbon Copy Clone&lt;/a&gt; as a
way of getting a hard drive copied onto and external firewire drive.
&lt;/p&gt;
&lt;p&gt;
And it all worked. I downloaded the software, booted up in the morning, and
copied 40Gb onto an external LaCie drive. My hard drive resisted a few
times, but judicious tapping of the case seemed to bring it back to life.
When it finished, I rebooted off the firewire drive, and was able to create
a book PDF to send to the printers before the weekend.
&lt;/p&gt;
&lt;p&gt;
Along the way, I came to admire the Carbon Copy Clone interface. It&amp;#8217;s
trivial: it basically asks you where to copy from and to, and gives you a
&amp;quot;start&amp;quot; button. But what makes it great is the log window. You
see, underneath the covers, CCC simply uses BSD commands to do its work
(things like &lt;tt&gt;ditto&lt;/tt&gt; and &lt;tt&gt;bless&lt;/tt&gt;). And in the log window, it
shows you these commands as it executes them. First, that means that as the
backup is happening, you can track the progress. I had a couple of terminal
windows open to I could see directories being created in response to the
commands that CCC was issuing. That made it easy to tell when the hard
drive had stalled.
&lt;/p&gt;
&lt;p&gt;
But it&amp;#8217;s also a great interface because it taught me two or three new
commands: things I hadn&amp;#8217;t tried before. After I&amp;#8217;d got a new
loaner Powerbook powered up, I found myself using &lt;tt&gt;ditto&lt;/tt&gt; a lot to
install particular applications and directory trees.
&lt;/p&gt;
&lt;p&gt;
So, for me at least, CCC is a really good example of a mixed-mode
interface. It&amp;#8217;s a GUI when I needed it (I have to admit to being
panicky when the drive failed, and the idea of pressing a single
&amp;quot;start&amp;quot; button to make an archive was appealling). At the same
time, it also encouraged me to understand what was &lt;em&gt;really&lt;/em&gt;
happening under the covers, knowledge I put to good use later in the day.
&lt;/p&gt;
&lt;p&gt;
And now I&amp;#8217;m thinking about the applications I write. Do I perhaps
hide too much of what&amp;#8217;s going on from my users? If I made it more
explicit, would it help them become more proficient?
&lt;/p&gt;
&lt;p&gt;
Anyway, kudos to Mike Bombich for Carbon Copy Clone. (And thanks to Tony at
the Willow Bend Apple Store for the loaner machine).
&lt;/p&gt;
</description>
  </item>

  <item>
    <title>Our Third Title!</title>
    <link>http://pragprog.com/pragdave/Random/CSharpBook.rdoc</link>
    <description>If I&amp;#8217;ve been distracted recently, it&amp;#8217;s because Andy and
I&amp;#8217;ve been heads-down getting our third book finalized. When we first
started &lt;a
href=&quot;http://www.pragmaticprogrammer.com/starter_kit/utc/index.html&quot;&gt;Pragmatic
Unit Testing in C# with NUnit&lt;/a&gt;, we though it would be a fairly light
rework of the JUnit book. We were wrong. Instead, we&amp;#8217;ve found that
we&amp;#8217;ve rewritten entire chapters, and heavily modified much of the
rest.

&lt;p&gt;
The good news is that with this book we&amp;#8217;re absolutely at the leading
edge. We were tracking the NUnit team as they added whole new sets of
features (check out &lt;em&gt;categories&lt;/em&gt; as a great way of grouping tests),
and Andy&amp;#8217;s been working closely with Charlie Poole (thanks, Charlie!)
to make sure we&amp;#8217;ve been capturing the spirit of what they&amp;#8217;re
releasing.
&lt;/p&gt;
&lt;p&gt;
We&amp;#8217;ve also decided to try an experiment: this time we&amp;#8217;re
releasing the PDF version while the paper book is going into production.
Folks who buy the PDF now will be able to get the standard combo discount
($12.50) on the paper book when it arrives from the printers.
&lt;/p&gt;
</description>
  </item>

  <item>
    <title>Desktop Manager for Panther</title>
    <link>http://pragprog.com/pragdave/Tech/Apple/DesktopManager.rdoc</link>
    <description>I can now no longer use a computer unless the windowing system has some
kind of facility for managing multiple desktops. It&amp;#8217;s just the way I
organize my work: I leave my e-mail client on one, ssh shells to various
servers on others. Each project I&amp;#8217;m working on has its own desktop.
When I switch contexts, I switch desktops. When I come back, my work is
still there, all laid out as I left it.

&lt;p&gt;
Now some folks think Expose on Panther does all this, but it doesn&amp;#8217;t.
Expose is great for finding buried windows and bringing them to the top,
but when I work on a project, I typically have two, three, or four windows
all in play at once. I&amp;#8217;ll have a couple of Emacs windows, a shell for
entering commands (I still prefer a real shell over Emacs shells), and
possibly a window tailing a log file. When I&amp;#8217;m working on book stuff,
I&amp;#8217;ll also have a PDF viewer, OmniGraffle, and ImageConvertor lying
around. Expose doesn&amp;#8217;t help with these: these windows form a working
set, and so far the best way I&amp;#8217;ve found of swapping them all in and
out is with multiple desktops.
&lt;/p&gt;
&lt;p&gt;
With OSX 10.1 and 10.2 I used CodeTek &lt;a
href=&quot;http://www.codetek.com&quot;&gt;VirtualDesktop&lt;/a&gt;, a wonderful utility that
let me switch back and forth between any number of desktops. However, when
I got Panther, the old virtual desktop didn&amp;#8217;t work so well. CodeTek
knew this, and instituted a program to support Panther. As an existing
customer, I was in their beta program, and the product seemed to be coming
along fine. However, their plan to charge existing customers for the
upgrade to support Panther rankled somewhat.
&lt;/p&gt;
&lt;p&gt;
Then I discovered &lt;a href=&quot;http://wsmanager.sourceforge.net/&quot;&gt;Desktop
Manager&lt;/a&gt;, an open source project that implemented desktops for OSX. And
it&amp;#8217;s wonderful. It still hasn&amp;#8217;t quite got the features of
Virtual Desktop (please, please, I need sticky windows for iChat&amp;#8230;),
but in many ways it&amp;#8217;s better. It handles applications popping up
windows more intuitively, and it has some very cool desktop switching
transitions.
&lt;/p&gt;
&lt;p&gt;
I recently gave my Naked Objects talk, during which I stop the slide show
and bring up a naked objects application. CodeTek&amp;#8217;s product never
seemed to be able to switch desktops when a presentation was in full-screen
mode. Desktop Manager handles it like a champ (and the rotating cube
transition between the show and the running naked objects app blew folks
away :).
&lt;/p&gt;
&lt;p&gt;
So, this is just a long, round-about way of saying a big thank you to
Richard Wareham and everyone else who&amp;#8217;ve contributed to making my
life better.
&lt;/p&gt;
</description>
  </item>

</channel>
</rss>
