<?xml version="1.0"?>
<rdf:RDF xmlns="http://purl.org/rss/1.0/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
	<channel rdf:about="http://raa.ruby-lang.org/index.rdf">
		<title>RAA</title>
		<link>http://raa.ruby-lang.org/</link>
		<description>Ruby Application Archive</description>
		
		<items>
			<rdf:Seq>
				<rdf:li resource="http://raa.ruby-lang.org/list.rhtml?name=packstruct"/>
				<rdf:li resource="http://raa.ruby-lang.org/list.rhtml?name=net-ssh"/>
				<rdf:li resource="http://raa.ruby-lang.org/list.rhtml?name=sqlite-ruby"/>
				<rdf:li resource="http://raa.ruby-lang.org/list.rhtml?name=samizdat"/>
				<rdf:li resource="http://raa.ruby-lang.org/list.rhtml?name=ruby-gettext"/>
				<rdf:li resource="http://raa.ruby-lang.org/list.rhtml?name=rubygo"/>
				<rdf:li resource="http://raa.ruby-lang.org/list.rhtml?name=alexandria"/>
				<rdf:li resource="http://raa.ruby-lang.org/list.rhtml?name=win32-eventlog"/>
				<rdf:li resource="http://raa.ruby-lang.org/list.rhtml?name=arachno_ruby"/>
				<rdf:li resource="http://raa.ruby-lang.org/list.rhtml?name=sys-host"/>


			</rdf:Seq>


		</items>

		
		<dc:language>en</dc:language>
		<dc:creator>Just another Ruby porter,</dc:creator>

	</channel>


	<item rdf:about="http://raa.ruby-lang.org/list.rhtml?name=packstruct">
		<title>packstruct</title>
		<link>http://raa.ruby-lang.org/list.rhtml?name=packstruct</link>
		<description>Wraps pack and unpack to make binary struct-like structures</description>
		<dc:date>2004-07-06T19:26:20+09:00</dc:date>
		<dc:subject>Library/Datastructure</dc:subject>
		<content:encoded>Allows creation of structures in an easy fashion:&lt;br&gt;
&lt;br&gt;
class Point &lt; PackStruct&lt;br&gt;
   field :x, 'L'&lt;br&gt;
   field :y, 'L'&lt;br&gt;
end&lt;br&gt;
&lt;br&gt;
Point.unpack("\1\0\0\0\5\0\0\0")  # =&gt; &lt;Point:#DEADBEEF @x = 1,  @y = 5&gt;</content:encoded>
		<dc:creator>Aredridel</dc:creator>

	</item>
	<item rdf:about="http://raa.ruby-lang.org/list.rhtml?name=net-ssh">
		<title>net-ssh</title>
		<link>http://raa.ruby-lang.org/list.rhtml?name=net-ssh</link>
		<description>SSH2 client protocol implemented in Ruby</description>
		<dc:date>2004-07-06T04:36:29+09:00</dc:date>
		<dc:subject>Library/Net</dc:subject>
		<content:encoded>Net::SSH is a Ruby library that allows you to communicate with a remote host via SSH (specifically the SSH2 protocol). File transfers and execution of remote commands are currently supported</content:encoded>
		<dc:creator>Jamis Buck</dc:creator>

	</item>
	<item rdf:about="http://raa.ruby-lang.org/list.rhtml?name=sqlite-ruby">
		<title>sqlite-ruby</title>
		<link>http://raa.ruby-lang.org/list.rhtml?name=sqlite-ruby</link>
		<description>Interface to the SQLite DB engine</description>
		<dc:date>2004-07-06T04:34:24+09:00</dc:date>
		<dc:subject>Library/Database</dc:subject>
		<content:encoded>Provides an interface for the SQLite DB engine.  This differs from the 'ruby-sqlite' project (also on RAA) in that it is more complete, and from the ruby DBI version of SQLite in that it is SQLite specific, so you can do things that would otherwise be more difficult via DBI.  If you want portability between backends, use DBI.  If you want ease of use with SQLite, use this. :)</content:encoded>
		<dc:creator>Jamis Buck</dc:creator>

	</item>
	<item rdf:about="http://raa.ruby-lang.org/list.rhtml?name=samizdat">
		<title>samizdat</title>
		<link>http://raa.ruby-lang.org/list.rhtml?name=samizdat</link>
		<description>Samizdat: RDF-based open publishing engine</description>
		<dc:date>2004-07-05T21:19:09+09:00</dc:date>
		<dc:subject>Application/WWW</dc:subject>
		<content:encoded>Samizdat is a generic RDF-based engine for building collaboration and open publishing web sites. Samizdat will let users cooperate and coordinate on all kinds of activities, including media activism, resource sharing, education and research, advocacy, etc., by allowing everyone to publish, view, comment, edit, and aggregate text and multimedia resources, vote on ratings and classifications, filter resources by flexible sets of criteria (see Design Goals document for details). Samizdat intends to promote values of freedom, openness, equality, and cooperation.&lt;br&gt;
&lt;br&gt;
Samizdat builds its underlying data model on RDF (Resource Description Framework), and defines a schema of resource classes and properties for core concepts of a Samizdat site: member, message, thread, tag, proposition, vote, version, part, and so on (see Concepts document). Open nature of RDF allows to add new metadata and new uses of site resources without effort, and to transparently interoperate with diverse set of applications supporting this standard.&lt;br&gt;
&lt;br&gt;
Samizdat project was inspired by Matthew Arnison's Open Publishing initiative and Active engine used by the IndyMedia.org project, and by rusty's Scoop engine used by Kuro5hin.org and other sites (see References document). It differs from other advanced open publishing engines, such as Active2 or MirCode, in that it uses RDF model from the ground up and targets other domains beyond publishing, such as coordination, education, and material items exchange.&lt;br&gt;
&lt;br&gt;
Samizdat is free software and is built using free software, such as Ruby programming language and PostgreSQL relational database management system. All Samizdat source code and documentation can be redistributed and/or modified under the terms of the GNU General Public License as published by Free Software Foundation; either version 2 of the license, or (at your option) any later version.</content:encoded>
		<dc:creator>Dmitry Borodaenko</dc:creator>

	</item>
	<item rdf:about="http://raa.ruby-lang.org/list.rhtml?name=ruby-gettext">
		<title>ruby-gettext</title>
		<link>http://raa.ruby-lang.org/list.rhtml?name=ruby-gettext</link>
		<description>Ruby-GetText-Package</description>
		<dc:date>2004-07-05T00:27:49+09:00</dc:date>
		<dc:subject>Library/I18N</dc:subject>
		<content:encoded>Ruby GetText Package is Native Language Support Library and Tools which modeled after GNU GetText package, but the APIs are more simpler than GNU GetText.&lt;br&gt;
</content:encoded>
		<dc:creator>Masao Mutoh</dc:creator>

	</item>
	<item rdf:about="http://raa.ruby-lang.org/list.rhtml?name=rubygo">
		<title>rubygo</title>
		<link>http://raa.ruby-lang.org/list.rhtml?name=rubygo</link>
		<description>Play the game of Go (Weichi-Baduk)</description>
		<dc:date>2004-07-04T06:14:06+09:00</dc:date>
		<dc:subject>Application/game</dc:subject>
		<content:encoded>RubyGo is a client for play the game of Go on the internet using IGS (The Internet Go Server). &lt;br&gt;
It uses tk for the GUI. &lt;br&gt;
RubyGo read and write standard game files (SGF4)&lt;br&gt;
It includes a set of problems.&lt;br&gt;
have fun  :-&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
</content:encoded>
		<dc:creator>Jean-Francois Menon</dc:creator>

	</item>
	<item rdf:about="http://raa.ruby-lang.org/list.rhtml?name=alexandria">
		<title>alexandria</title>
		<link>http://raa.ruby-lang.org/list.rhtml?name=alexandria</link>
		<description>A book collection manager for GNOME</description>
		<dc:date>2004-07-04T04:24:57+09:00</dc:date>
		<dc:subject>Application/Utility</dc:subject>
		<content:encoded>Alexandria is a GNOME application to help manage a book collection. &lt;br&gt;
&lt;br&gt;
It retrieves book information (including cover pictures) from several online libraries such as Amazon and Proxis, allows you to search for a book either by EAN/ISBN, title, authors or keyword, saves data using the YAML format, features an HIG-compliant user interface, shows books in different views (standard list or icons list) that can be filtered and/or sorted, handles book rating and notes and includes translations for several languages.</content:encoded>
		<dc:creator>Laurent Sansonetti</dc:creator>

	</item>
	<item rdf:about="http://raa.ruby-lang.org/list.rhtml?name=win32-eventlog">
		<title>win32-eventlog</title>
		<link>http://raa.ruby-lang.org/list.rhtml?name=win32-eventlog</link>
		<description>Interface to the Win32 EventLog API</description>
		<dc:date>2004-07-03T04:54:08+09:00</dc:date>
		<dc:subject>Library/Win32</dc:subject>
		<content:encoded>An interface to the Win32 EventLog API.&lt;br&gt;
&lt;br&gt;
Changes for 0.2.2&lt;br&gt;
=================&lt;br&gt;
- Fixed a bug in the read() method where not all the records were being returned.&lt;br&gt;
- Fixed calls to rb_time_new() - second argument appears to be mandatory as of 1.8.2.&lt;br&gt;
- Renamed struct returned by read() to "EventLog".&lt;br&gt;
- Changed struct members "id" and "type" to "event_id" and "event_type", respectively.  This was to avoid any confusion with the builtin Ruby methods of the same name.&lt;br&gt;
- Replaced STR2CSTR() with StringValuePtr(), as the former is deprecated. This means that as of this version, Ruby 1.8.0 or later is required.&lt;br&gt;
- Moved the sample programs to doc/examples.&lt;br&gt;
&lt;br&gt;
Synopsis&lt;br&gt;
========&lt;br&gt;
require "win32/eventlog"&lt;br&gt;
include Win32&lt;br&gt;
	&lt;br&gt;
handle = EventLog.open("Application")&lt;br&gt;
	&lt;br&gt;
handle.total_records # e.g. 916&lt;br&gt;
handle.oldest_record_number # e.g. 1&lt;br&gt;
	&lt;br&gt;
# Read through every entry, inspecting each struct in turn handle.read{ |elr|&lt;br&gt;
   p elr&lt;br&gt;
   puts&lt;br&gt;
}&lt;br&gt;
	&lt;br&gt;
# Backup the Application log&lt;br&gt;
handle.backup("C:\\Backups\\Application.bak")&lt;br&gt;
	&lt;br&gt;
# Clear the Application log, after backing it up&lt;br&gt;
handle.clear("C:\\Backups\\Application.old")&lt;br&gt;
	&lt;br&gt;
handle.close</content:encoded>
		<dc:creator>Daniel J. Berger</dc:creator>

	</item>
	<item rdf:about="http://raa.ruby-lang.org/list.rhtml?name=arachno_ruby">
		<title>arachno_ruby</title>
		<link>http://raa.ruby-lang.org/list.rhtml?name=arachno_ruby</link>
		<description>Integrated Development Environment</description>
		<dc:date>2004-07-02T22:10:03+09:00</dc:date>
		<dc:subject>Application/IDE</dc:subject>
		<content:encoded>Development Environment with an Emacs like editor, integrated very fast GUI Debugger, source code browsing, local Apache environment for developing/debugging CGI's and integrated FTP Client.&lt;br&gt;
&lt;br&gt;
The debugger is now the easiest way to debug CGI and ERuby scripts.&lt;br&gt;
</content:encoded>
		<dc:creator>lothar</dc:creator>

	</item>
	<item rdf:about="http://raa.ruby-lang.org/list.rhtml?name=sys-host">
		<title>sys-host</title>
		<link>http://raa.ruby-lang.org/list.rhtml?name=sys-host</link>
		<description>hostname and ip address info via Ruby - C extension</description>
		<dc:date>2004-06-30T22:33:43+09:00</dc:date>
		<dc:subject>Library/OS</dc:subject>
		<content:encoded>A C extension that provides hostname and IP address information about the current host.&lt;br&gt;
&lt;br&gt;
CHANGES&lt;br&gt;
=======&lt;br&gt;
- Replaced Windows C extension with pure Ruby version, using WMI + OLE.&lt;br&gt;
- Added an additional class method called 'info' that returns a HostInfo struct.  Currently on Windows only.&lt;br&gt;
- Removed the block form of Host.ip_addr. It now simply returns an Array.&lt;br&gt;
- Renamed and revamped test suite.&lt;br&gt;
- Moved test.rb to doc/examples&lt;br&gt;
- Removed the host.html file.&lt;br&gt;
- Replaced previous exception classes with a single exception class, HostError, and moved it under the Sys module namespace.</content:encoded>
		<dc:creator>Daniel J. Berger</dc:creator>

	</item>



</rdf:RDF>